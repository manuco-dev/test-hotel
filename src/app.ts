import { join } from 'path'
import { createBot, createProvider, createFlow, addKeyword, utils } from '@builderbot/bot'
import { MemoryDB as Database } from '@builderbot/bot'
import { BaileysProvider as Provider } from '@builderbot/provider-baileys'
import axios from 'axios'

const PORT = process.env.PORT ?? 3008

// Datos simulados del hotel
const hotelData = {
    meals: {
        breakfast: "üç≥ Desayuno de hoy: Huevos revueltos, pan reci√©n horneado, frutas frescas, caf√©/t√©",
        lunch: "üçù Almuerzo de hoy: Pasta al pesto, ensalada C√©sar, sopa del d√≠a",
        dinner: "üçñ Cena de hoy: Filete de res, pur√© de papas, vegetales asados"
    },
    activities: [
        "üèä‚Äç‚ôÇÔ∏è 9:00 AM - Clase de nataci√≥n en la piscina",
        "üßò‚Äç‚ôÄÔ∏è 11:00 AM - Yoga en el jard√≠n",
        "üéØ 3:00 PM - Torneo de dardos en el bar",
        "üíÉ 8:00 PM - Noche de baile latino"
    ],
    restaurants: [
        "üçΩÔ∏è La Trattoria Di Marco - Comida italiana (‚≠ê‚≠ê‚≠ê‚≠ê¬Ω)",
        "ü•ò El Rinc√≥n Criollo - Comida local (‚≠ê‚≠ê‚≠ê‚≠ê)",
        "üç£ Sushi Zen - Comida japonesa (‚≠ê‚≠ê‚≠ê‚≠ê)",
        "ü•© The Grill House - Carnes y parrilla (‚≠ê‚≠ê‚≠ê‚≠ê¬Ω)"
    ],
    hotelPlans: [
        "üåü Plan Todo Incluido - Comidas y bebidas ilimitadas",
        "üéØ Plan Aventura - Incluye tours y actividades extremas",
        "üíÜ‚Äç‚ôÄÔ∏è Plan Relax - Acceso ilimitado al spa",
        "üë®‚Äçüë©‚Äçüë¶ Plan Familiar - Actividades para ni√±os y descuentos"
    ]
}

// Funci√≥n para obtener el clima (simulada por ahora, pero preparada para API real)
const getWeather = async () => {
    try {
        // Aqu√≠ podr√≠as integrar una API real del clima
        return "üå§Ô∏è 25¬∞C - Parcialmente nublado con probabilidad de lluvia por la tarde"
    } catch (error) {
        return "No se pudo obtener la informaci√≥n del clima"
    }
}

const menuFlow = addKeyword<Provider, Database>(['menu', 'opciones'])
    .addAnswer([
        'üè® *Bienvenido al Hotel Paradise*',
        '',
        'Selecciona una opci√≥n:',
        '',
        '1Ô∏è‚É£ Ver men√∫ del d√≠a',
        '2Ô∏è‚É£ Actividades de hoy',
        '3Ô∏è‚É£ Restaurantes recomendados',
        '4Ô∏è‚É£ Planes del hotel',
        '5Ô∏è‚É£ Clima actual',
        '',
        'Responde con el n√∫mero de la opci√≥n que deseas consultar'
    ].join('\n'))

const mealsFlow = addKeyword<Provider, Database>(['1', 'menu del dia', 'comida'])
    .addAnswer([
        'üçΩÔ∏è *Men√∫ del d√≠a*',
        '',
        '*Desayuno*',
        hotelData.meals.breakfast,
        '',
        '*Almuerzo*',
        hotelData.meals.lunch,
        '',
        '*Cena*',
        hotelData.meals.dinner,
        '',
        'Escribe *menu* para volver al men√∫ principal'
    ].join('\n'))

const activitiesFlow = addKeyword<Provider, Database>(['2', 'actividades'])
    .addAnswer([
        'üìÖ *Actividades de hoy*',
        '',
        ...hotelData.activities,
        '',
        'Escribe *menu* para volver al men√∫ principal'
    ].join('\n'))

const restaurantsFlow = addKeyword<Provider, Database>(['3', 'restaurantes'])
    .addAnswer([
        'üçΩÔ∏è *Restaurantes Recomendados*',
        '',
        ...hotelData.restaurants,
        '',
        'Escribe *menu* para volver al men√∫ principal'
    ].join('\n'))

const plansFlow = addKeyword<Provider, Database>(['4', 'planes'])
    .addAnswer([
        'üí´ *Planes del Hotel*',
        '',
        ...hotelData.hotelPlans,
        '',
        'Escribe *menu* para volver al men√∫ principal'
    ].join('\n'))

const weatherFlow = addKeyword<Provider, Database>(['5', 'clima'])
    .addAction(async (_, { flowDynamic }) => {
        const weather = await getWeather()
        await flowDynamic([
            'üå°Ô∏è *Clima actual*',
            '',
            weather,
            '',
            'Escribe *menu* para volver al men√∫ principal'
        ].join('\n'))
    })

const welcomeFlow = addKeyword<Provider, Database>(['hola', 'hi', 'buenos dias', 'buenas'])
    .addAnswer([
        'üëã ¬°Bienvenido al Hotel Paradise!',
        '',
        'Soy tu asistente virtual y estoy aqu√≠ para ayudarte.',
        '',
        'Escribe *menu* para ver todas las opciones disponibles'
    ].join('\n'))

const main = async () => {
    const adapterFlow = createFlow([
        welcomeFlow,
        menuFlow,
        mealsFlow,
        activitiesFlow,
        restaurantsFlow,
        plansFlow,
        weatherFlow
    ])
    
    const adapterProvider = createProvider(Provider)
    const adapterDB = new Database()

    const { handleCtx, httpServer } = await createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    })

    httpServer(+PORT)
}

main()
